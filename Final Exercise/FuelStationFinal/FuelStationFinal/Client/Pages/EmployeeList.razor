@page "/employeeList"
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@using FuelStationFinal.Shared.ViewModels
@using Microsoft.AspNetCore.Components;
@using System.Net.Http.Json;
@using FuelStationFinal.Shared;

<PageTitle>Fuel Station - Employees</PageTitle>
<h3>Employees</h3>

<div class=row>

    <button class="btn btn-primary w-25" @onclick="AddItem">Add</button>

</div>


@if (isLoading)
{
    <p>Loading ...</p>
}
else
{
    <div class="table-responsive-md">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Type</th>
                    <th>Salary</th>
                    <th>Fired</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in employeeList)
                {
                    <tr>
                        <td>@employee.Name</td>
                        <td>@employee.Surname</td>
                        <td>@employee.EmployeeType</td>
                        <td>@employee.SallaryPerMonth</td>
                        <td>@employee.Fired</td>
                        <td>
                            <button class="btn btn-warning text-primary" @onclick="() => EditItem(employee)">Edit</button>
                            <button class="btn btn-danger text-primary" @onclick="() => DeleteItem(employee)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
@code {

    List<EmployeeListViewModel> employeeList = new();
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer()
    {
        employeeList = await httpClient.GetFromJsonAsync<List<EmployeeListViewModel>>("employee");
    }

    async Task AddItem()
    {
        navigationManager.NavigateTo("/employeeList/edit");
    }

    async Task EditItem(EmployeeListViewModel itemToEdit)
    {
        navigationManager.NavigateTo($"/employeeList/edit/{itemToEdit.ID}");
    }

    async Task DeleteItem(EmployeeListViewModel itemToDelete)
    {
        
            var response = await httpClient.DeleteAsync($"employee/{itemToDelete.ID}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        
    }
    }
